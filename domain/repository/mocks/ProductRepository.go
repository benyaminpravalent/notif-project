// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	model "github.com/richardsahvic/jamtangan/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: product
func (_m *ProductRepository) Create(product *model.Product) error {
	ret := _m.Called(product)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByBrandID provides a mock function with given fields: brandID
func (_m *ProductRepository) GetByBrandID(brandID int64) ([]*model.Product, error) {
	ret := _m.Called(brandID)

	var r0 []*model.Product
	if rf, ok := ret.Get(0).(func(int64) []*model.Product); ok {
		r0 = rf(brandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(brandID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *ProductRepository) GetByID(id int64) (*model.Product, error) {
	ret := _m.Called(id)

	var r0 *model.Product
	if rf, ok := ret.Get(0).(func(int64) *model.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySKU provides a mock function with given fields: sku
func (_m *ProductRepository) GetBySKU(sku string) (*model.Product, error) {
	ret := _m.Called(sku)

	var r0 *model.Product
	if rf, ok := ret.Get(0).(func(string) *model.Product); ok {
		r0 = rf(sku)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sku)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
