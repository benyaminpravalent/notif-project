// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/project/notif-project/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// NotifService is an autogenerated mock type for the NotifService type
type NotifService struct {
	mock.Mock
}

// GenerateKey provides a mock function with given fields: ctx, request
func (_m *NotifService) GenerateKey(ctx context.Context, request model.GenerateKeyRequest) (int, *model.BaseResponse) {
	ret := _m.Called(ctx, request)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, model.GenerateKeyRequest) int); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 *model.BaseResponse
	if rf, ok := ret.Get(1).(func(context.Context, model.GenerateKeyRequest) *model.BaseResponse); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.BaseResponse)
		}
	}

	return r0, r1
}

// InsertUrl provides a mock function with given fields: ctx, request
func (_m *NotifService) InsertUrl(ctx context.Context, request model.Url) (int, *model.BaseResponse) {
	ret := _m.Called(ctx, request)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, model.Url) int); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 *model.BaseResponse
	if rf, ok := ret.Get(1).(func(context.Context, model.Url) *model.BaseResponse); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.BaseResponse)
		}
	}

	return r0, r1
}

// RetrySendNotifExecution provides a mock function with given fields: ctx, param
func (_m *NotifService) RetrySendNotifExecution(ctx context.Context, param model.SendNotifGoRoutine) (int, *model.BaseResponse) {
	ret := _m.Called(ctx, param)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, model.SendNotifGoRoutine) int); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 *model.BaseResponse
	if rf, ok := ret.Get(1).(func(context.Context, model.SendNotifGoRoutine) *model.BaseResponse); ok {
		r1 = rf(ctx, param)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.BaseResponse)
		}
	}

	return r0, r1
}

// SendNotif provides a mock function with given fields: ctx, request
func (_m *NotifService) SendNotif(ctx context.Context, request model.SendNotif) (int, *model.BaseResponse) {
	ret := _m.Called(ctx, request)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, model.SendNotif) int); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 *model.BaseResponse
	if rf, ok := ret.Get(1).(func(context.Context, model.SendNotif) *model.BaseResponse); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.BaseResponse)
		}
	}

	return r0, r1
}

// SendNotifExecution provides a mock function with given fields: ctx, param
func (_m *NotifService) SendNotifExecution(ctx context.Context, param model.SendNotifGoRoutine) (int, *model.BaseResponse) {
	ret := _m.Called(ctx, param)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, model.SendNotifGoRoutine) int); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 *model.BaseResponse
	if rf, ok := ret.Get(1).(func(context.Context, model.SendNotifGoRoutine) *model.BaseResponse); ok {
		r1 = rf(ctx, param)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.BaseResponse)
		}
	}

	return r0, r1
}

// SendNotificationTester provides a mock function with given fields: ctx, request
func (_m *NotifService) SendNotificationTester(ctx context.Context, request model.NotificationTesterRequest) (int, *model.BaseResponse) {
	ret := _m.Called(ctx, request)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, model.NotificationTesterRequest) int); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 *model.BaseResponse
	if rf, ok := ret.Get(1).(func(context.Context, model.NotificationTesterRequest) *model.BaseResponse); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.BaseResponse)
		}
	}

	return r0, r1
}

// UrlToggleStatus provides a mock function with given fields: ctx, request
func (_m *NotifService) UrlToggleStatus(ctx context.Context, request model.UrlToggleStatusRequest) (int, *model.BaseResponse) {
	ret := _m.Called(ctx, request)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, model.UrlToggleStatusRequest) int); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 *model.BaseResponse
	if rf, ok := ret.Get(1).(func(context.Context, model.UrlToggleStatusRequest) *model.BaseResponse); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.BaseResponse)
		}
	}

	return r0, r1
}